<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= typeof title !== 'undefined' ? title : 'My Contacts - JobTrek' %></title>
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">

    <link rel="stylesheet" href="/styles/main.css">
    <link rel="stylesheet" href="/styles/sidebar.css">
    <style>
        body {
            /* Ensure dark background is applied if not in main.css or if overrides are needed */
        }
        .main-content-area {
            flex-grow: 1;
            padding: 20px;
        }
        .contact-card {
            /* Add any specific styling for contact cards if needed */
        }
        /* Alert message styling (copied from index.ejs for consistency) */
        .alert-info { background-color: #0dcaf0; border-color: #0dcaf0; color: #000; }
        .alert-success { background-color: #198754; border-color: #198754; color: #fff; }
        .alert-danger { background-color: #dc3545; border-color: #dc3545; color: #fff; }
    </style>
</head>
<body class="text-bg-dark">

    <%- include("partials/header.ejs") %>

    <div class="d-flex flex-column flex-md-row">
        <%- include("partials/sidebar.ejs") %>

        <div class="main-content-area container-fluid mt-md-4">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h2 class="text-white"><%= typeof title !== 'undefined' ? title : 'My Contacts' %></h2>
                <a href="/contact-page" class="btn btn-primary">
                    <i class="bi bi-plus-circle me-2"></i>Add New Contact
                </a>
            </div>

            <div id="globalContactsMessage" class="mb-3 text-center"></div>

            <div class="row mt-3" id="contacts-container">
                </div>
        </div>
    </div>

    <div class="modal fade" id="deleteContactModal" tabindex="-1" aria-labelledby="deleteContactModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content bg-dark text-white">
                <div class="modal-header border-secondary">
                    <h5 class="modal-title" id="deleteContactModalLabel">Confirm Deletion</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="deleteContactModalBodyContent">
                    Are you sure you want to delete this contact?
                </div>
                <div class="modal-footer border-secondary">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteContactButton">Delete Contact</button>
                </div>
            </div>
        </div>
    </div>
    <%- include("partials/footer.ejs") %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const contactsContainer = document.getElementById("contacts-container");
            const deleteContactModalElement = document.getElementById('deleteContactModal');
            const confirmDeleteContactButton = document.getElementById('confirmDeleteContactButton');
            let contactEmailToDelete = null;
            // let currentFetchedContacts = []; // For client-side search, if implemented

            function displayGlobalMessage(message, type = 'info') {
                const messageDiv = document.getElementById("globalContactsMessage");
                if (messageDiv) {
                    messageDiv.textContent = message;
                    messageDiv.className = `mb-3 text-center alert alert-${type} ${!message ? 'd-none' : ''}`;
                }
            }
            
            async function fetchAndRenderContacts() {
                if (!contactsContainer) return;
                displayGlobalMessage("Loading contacts...", "info");
                contactsContainer.innerHTML = '';

                try {
                    const response = await fetch('/api/v1/contacts'); // GET request
                    if (response.status === 401 || (response.status === 400 && (await response.clone().json()).message?.toLowerCase().includes('session'))) {
                        window.location.href = '/login';
                        return;
                    }
                    if (!response.ok) {
                        const errData = await response.json().catch(() => ({ message: `HTTP error ${response.status}` }));
                        throw new Error(errData.message);
                    }
                    const result = await response.json(); // Expects { message: "success", data: [] }

                    if (result.data && Array.isArray(result.data)) {
                        // currentFetchedContacts = result.data; // For client-side search
                        if (result.data.length > 0) {
                            renderContactsUI(result.data);
                            displayGlobalMessage(''); // Clear loading message
                        } else {
                           contactsContainer.innerHTML = '<div class="col-12"><p class="text-white text-center">No contacts found. <a href="/contact-page">Add one now!</a></p></div>';
                           displayGlobalMessage('');
                        }
                    } else {
                         throw new Error("Invalid data format received from server for contacts.");
                    }
                } catch (error) {
                    console.error('Failed to fetch contacts:', error);
                    displayGlobalMessage(`Failed to load contacts: ${error.message}`, 'danger');
                    contactsContainer.innerHTML = '';
                }
            }

            function renderContactsUI(contacts) {
                if (!contactsContainer) return;
                contactsContainer.innerHTML = ''; 
                
                if (!contacts || contacts.length === 0) {
                    // Handle empty state (already done in fetchAndRenderContacts)
                    return;
                }

                // Fields from repository: Name, company, role, phoneNumber, contactEmail, linkedinProfile
                contacts.forEach(contact => {
                    const card = document.createElement('div');
                    card.className = 'col-lg-4 col-md-6 mb-4 contact-card';
                    card.innerHTML = `
                        <div class="card bg-secondary text-white border-light h-100">
                            <div class="card-body d-flex flex-column">
                                <h5 class="card-title">${contact.Name || 'N/A'}</h5>
                                <h6 class="card-subtitle mb-2 text-light">${contact.role || 'N/A'} at ${contact.company || 'N/A'}</h6>
                                <p class="card-text small">
                                    <i class="bi bi-envelope-fill me-1"></i> ${contact.contactEmail || 'N/A'}<br>
                                    <i class="bi bi-telephone-fill me-1"></i> ${contact.phoneNumber || 'N/A'}
                                    ${contact.linkedinProfile ? `<br><i class="bi bi-linkedin me-1"></i> <a href="${contact.linkedinProfile.startsWith('http') ? '' : '//'}${contact.linkedinProfile}" target="_blank" class="text-white">${contact.linkedinProfile}</a>` : ''}
                                </p>
                                <div class="mt-auto pt-2 d-flex justify-content-end">
                                    <button type="button" class="btn btn-sm btn-outline-danger delete-contact-btn"
                                            data-bs-toggle="modal" data-bs-target="#deleteContactModal"
                                            data-contact-email="${contact.contactEmail}"
                                            data-contact-name="${contact.Name}">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                    contactsContainer.appendChild(card);
                });
            }

            if (deleteContactModalElement) {
                deleteContactModalElement.addEventListener('show.bs.modal', function (event) {
                    const button = event.relatedTarget;
                    if (button) {
                        contactEmailToDelete = button.getAttribute('data-contact-email');
                        const contactName = button.getAttribute('data-contact-name');
                        const modalBody = deleteContactModalElement.querySelector('#deleteContactModalBodyContent');
                        if (modalBody) {
                            modalBody.textContent = `Are you sure you want to delete the contact: ${contactName || contactEmailToDelete}?`;
                        }
                    }
                });

                deleteContactModalElement.addEventListener('hidden.bs.modal', function () {
                    const backdrops = document.querySelectorAll('.modal-backdrop');
                    backdrops.forEach(backdrop => backdrop.remove());
                    document.body.classList.remove('modal-open');
                    document.body.style.overflow = '';
                    document.body.style.paddingRight = '';
                });
            }

            if (confirmDeleteContactButton) {
                confirmDeleteContactButton.addEventListener('click', async () => {
                    if (!contactEmailToDelete) return;
                    displayGlobalMessage("Deleting contact...", "info");
                    try {
                        const response = await fetch('/api/v1/contacts', {
                            method: 'DELETE', 
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ contactEmail: contactEmailToDelete }) // API expects contactEmail
                        });
                        const result = await response.json();
                        if (response.ok) {
                            displayGlobalMessage(result.message || 'Contact deleted successfully!', 'success');
                            fetchAndRenderContacts(); // Refresh the list
                        } else {
                            displayGlobalMessage(`Deletion failed: ${result.message || response.statusText}`, 'danger');
                        }
                    } catch (error) {
                        console.error('Delete contact API error:', error);
                        displayGlobalMessage('An error occurred while deleting the contact.', 'danger');
                    } finally {
                        const modalInstance = bootstrap.Modal.getInstance(deleteContactModalElement);
                        if (modalInstance) modalInstance.hide();
                        contactEmailToDelete = null;
                    }
                });
            }

            // Initial fetch of contacts
            fetchAndRenderContacts();
        });
    </script>
</body>
</html>